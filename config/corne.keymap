/*


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV 1
#define SYM 2
#define UTIL 3

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <250>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    Base_layer {
      bindings = <
        &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BACKSPACE &hm LCTRL ESCAPE &hm LCTRL A &hm LSHFT S &hm LALT D &hm LGUI F &kp G &kp H &hm RGUI J &hm RALT K &hm RSHFT L &hm RCTRL SEMICOLON &kp SINGLE_QUOTE &kp LEFT_SHIFT &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp PERIOD &kp SLASH &kp BACKSLASH &mo SYM &mo NAV &kp RETURN &kp SPACE &kp BACKSPACE &mo UTIL 
      >;
    };

    nav_layer {
      bindings = <
        &none &none &none &none &none &none &kp PG_UP &kp HOME &kp UP &kp END &none &none &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none 
      >;
    };

    sym_layer {
      bindings = <
        &none &none &none &none &none &none &kp ASTERISK &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp PLUS &none &none &none &none &none &none &none &kp SLASH &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp MINUS &none &none &none &none &none &none &none &kp UNDERSCORE &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp EQUAL &none &none &none &none &none &none &kp NUMBER_0 
      >;
    };

    util_layer {
      bindings = <
        &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none 
      >;
    };
  };
};
*/
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lhmp: left_homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 7 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 6 7 8 9 10 18 19 20 21 22 30 31 32 33 6 7 8 9 18 19 20 21 30 31 32 33 26 27 28 5 16>;
        };

        lhmr: left_homerow_mods_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_RING";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 7 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 6 7 8 9 10 18 19 20 21 22 30 31 32 33 6 7 8 9 18 19 20 21 30 31 32 33>;
        };

        lhmm: left_homerow_mods_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 7 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 6 7 8 9 10 18 19 20 21 22 30 31 32 33 6 7 8 9 18 19 20 21 30 31 32 33>;
        };

        lhmi: left_homerow_mods_index {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 7 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 6 7 8 9 10 18 19 20 21 22 30 31 32 33 6 7 8 9 18 19 20 21 30 31 32 33>;
        };

        rhmp: right_homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        rhmr: right_homerow_mods_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_ring";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        rhmm: right_homerow_mods_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        rhmi: right_homerow_mods_index {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <160>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        singlequotes+double {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 19>;
            require-prior-idle-ms = <150>;
        };

        grave+tilde {
            bindings = <&kp GRAVE>;
            key-positions = <3 16>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <20 31>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 28>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <14 21>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <30 31>;
            require-prior-idle-ms = <150>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <29 28>;
        };

        double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <8 19 9>;
            require-prior-idle-ms = <150>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <16 15>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <18 19>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 33>;
        };

        ctrl_left {
            bindings = <&kp LC(LEFT_ARROW)>;
            key-positions = <19 20>;
            layers = <2>;
        };

        ctrl_right {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <20 21>;
            layers = <2>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <8 9>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <31 32>;
        };

        exclaimation {
            bindings = <&kp EXCL>;
            key-positions = <32 33>;
        };

        paren {
            bindings = <&combo_parens>;
            key-positions = <20 21>;
        };

        brace {
            bindings = <&combo_brace>;
            key-positions = <15 14>;
        };

        bracket {
            bindings = <&combo_bracket>;
            key-positions = <2 3>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <16 17>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <6 7>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <5 4>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <4 3>;
        };
    };

    macros {
        combo_parens: combo_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "COMBO_PARENS";
        };

        combo_brace: combo_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "COMBO_BRACE";
        };

        combo_bracket: combo_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "COMBO_BRACKET";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp DELETE    &kp Q                 &kp W               &kp E             &kp R             &kp T                   &kp Y                     &kp U             &kp I             &kp O                &kp P                     &kp BSPC
&gresc        &lhmp LEFT_CONTROL A  &lhmr LEFT_SHIFT S  &lhmm LEFT_ALT D  &lhmi LEFT_GUI F  &kp G                   &kp H                     &rhmi LEFT_GUI J  &rhmm LEFT_ALT K  &rhmr RIGHT_SHIFT L  &rhmp RIGHT_CONTROL SEMI  &kp ENTER
&sk LEFT_ALT  &kp Z                 &kp X               &kp C             &kp V             &kp B                   &kp N                     &kp M             &kp COMMA         &kp DOT              &kp FSLH                  &sk LEFT_GUI
                                                        &lt 3 DEL         &lt 1 TAB         &tm LEFT_SHIFT SPACE    &lhmp LEFT_CONTROL SPACE  &lt 2 ENTER       &lt 4 BACKSPACE
            >;
        };

        layer_symb {
            bindings = <
&trans  &trans                         &trans                        &kp LEFT_BRACKET                 &kp RIGHT_BRACKET                 &kp CARET        &kp PIPE          &kp N7               &kp N8  &kp N9  &trans  &trans
&trans  &lhmp LEFT_CONTROL LEFT_BRACE  &lhmp LEFT_SHIFT RIGHT_BRACE  &lhmp LEFT_ALT LEFT_PARENTHESIS  &lhmp LEFT_GUI RIGHT_PARENTHESIS  &kp LESS_THAN    &kp GREATER_THAN  &kp N4               &kp N5  &kp N6  &trans  &trans
&trans  &trans                         &trans                        &kp LEFT_BRACE                   &kp RIGHT_BRACE                   &kp AMPS         &kp PERCENT       &kp N1               &kp N2  &kp N3  &trans  &trans
                                                                     &trans                           &trans                            &trans           &trans            &lhmp LEFT_SHIFT N0  &trans
            >;
        };

        layer_navi {
            bindings = <
&trans  &trans  &kp NUMBER_7  &kp N8        &kp NUMBER_9  &trans    &kt PAGE_UP    &kp HOME  &kp UP    &kp END    &kp PRINTSCREEN  &kp C_AL_LOCK
&trans  &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans    &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans           &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &trans        &trans    &trans         &trans    &trans    &trans     &trans           &trans
                              &trans        &trans        &trans    &trans         &trans    &trans
            >;
        };

        layer_func {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_sys {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_PRV  &bt BT_NXT        &trans       &kp C_PLAY         &kp C_PAUSE  &kp C_PAUSE      &trans  &trans
&trans      &trans        &trans        &trans        &trans      &trans            &trans       &kp C_VOLUME_DOWN  &kp C_MUTE   &kp C_VOLUME_UP  &trans  &trans
&trans      &trans        &trans        &trans        &trans      &trans            &trans       &trans             &trans       &trans           &trans  &trans
                                        &trans        &trans      &studio_unlock    &bootloader  &sys_reset         &trans
            >;
        };

        Symbols_hr {
            bindings = <
&trans  &kp NUMBER_1  &kp N2  &kp N3        &kp N4         &kp N5          &kp N6        &kp N7         &kp N8        &kp N9        &kp N0        &trans
&trans  &kp CARET     &kp AT  &kp LS(LPAR)  &kp LS(PRCNT)  &kp LS(AMPS)    &kp LS(STAR)  &kp LS(POUND)  &kp LS(RPAR)  &kp LS(STAR)  &kp LS(PIPE)  &trans
&trans  &trans        &trans  &trans        &trans         &trans          &trans        &trans         &trans        &trans        &trans        &trans
                              &trans        &trans         &trans          &trans        &trans         &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SYMB {
            if-layers = <2 1>;
            then-layer = <5>;
        };
    };
};
