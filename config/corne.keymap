/*


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV 1
#define SYM 2
#define UTIL 3

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <250>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    Base_layer {
      bindings = <
        &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BACKSPACE &hm LCTRL ESCAPE &hm LCTRL A &hm LSHFT S &hm LALT D &hm LGUI F &kp G &kp H &hm RGUI J &hm RALT K &hm RSHFT L &hm RCTRL SEMICOLON &kp SINGLE_QUOTE &kp LEFT_SHIFT &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp PERIOD &kp SLASH &kp BACKSLASH &mo SYM &mo NAV &kp RETURN &kp SPACE &kp BACKSPACE &mo UTIL 
      >;
    };

    nav_layer {
      bindings = <
        &none &none &none &none &none &none &kp PG_UP &kp HOME &kp UP &kp END &none &none &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none 
      >;
    };

    sym_layer {
      bindings = <
        &none &none &none &none &none &none &kp ASTERISK &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp PLUS &none &none &none &none &none &none &none &kp SLASH &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp MINUS &none &none &none &none &none &none &none &kp UNDERSCORE &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp EQUAL &none &none &none &none &none &none &kp NUMBER_0 
      >;
    };

    util_layer {
      bindings = <
        &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none 
      >;
    };
  };
};
*/




/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
    };
    combos {
        compatible = "zmk,combos";

        dbl_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <17 18>;
        };

        zero {
            bindings = <&kp KP_NUMBER_0>;
            key-positions = <0 1>;
        };

        one {
            bindings = <&kp KP_NUMBER_1>;
            key-positions = <1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q               &kp W             &kp E           &kp R           &kp T          &kp Y        &kp U            &kp I            &kp O              &kp P                   &kp BSPC
&hm LCTRL ESCAPE  &hm LEFT_CONTROL A  &hm LEFT_SHIFT S  &hm LEFT_ALT D  &hm LEFT_GUI F  &kp G          &kp H        &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm RIGHT_SHIFT L  &hm RIGHT_CONTROL SEMI  &kp ENTER
&kp LSHFT         &kp Z               &kp X             &kp C           &kp V           &kp B          &kp N        &kp M            &kp COMMA        &kp DOT            &kp FSLH                &kp SINGLE_QUOTE
                                                        &caps_word      &lt 3 UNDER     &lt 2 ENTER    &lt 2 SPACE  &lt 1 BACKSPACE  &kp DELETE
            >;
        };

        layer_3 {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_PRV  &bt BT_NXT    &kt C_VOLUME_UP  &kp HOME  &kp UP           &kp END             &kp PG_UP   &kp PG_DN
&trans      &trans        &trans        &trans        &trans      &trans        &kp K_MUTE       &kp LEFT  &kp DOWN         &kp RIGHT           &kp PG_DN   &soft_off
&trans      &trans        &trans        &trans        &trans      &trans        &kp C_VOL_DN     &kp C_RW  &kp PAUSE_BREAK  &kp C_FAST_FORWARD  &sys_reset  &bootloader
                                        &trans        &trans      &trans        &trans           &trans    &trans
            >;
        };

        layer_4 {
            bindings = <
&kp AT      &kp AMPS               &kp PERCENT              &kp LEFT_BRACKET               &kp RIGHT_BRACKET               &kp BACKSLASH    &kp SLASH  &kp N7  &kp N8  &kp N9  &kp STAR  &kp BACKSPACE
&kp GRAVE   &hm LEFT_CONTROL EXCL  &hm LEFT_SHIFT QUESTION  &hm LEFT_ALT LEFT_PARENTHESIS  &hm LEFT_GUI RIGHT_PARENTHESIS  &kp MINUS        &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp SEMI  &kp SINGLE_QUOTE
&kp DOLLAR  &trans                 &trans                   &kp POUND                      &kp CARET                       &kp COMMA        &kp DOT    &kp N1  &kp N2  &kp N3  &kp FSLH  &trans
                                                            &trans                         &trans                          &trans           &trans     &trans  &kp N0
            >;
        };

        layer_5 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};